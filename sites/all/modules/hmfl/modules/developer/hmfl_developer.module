<?php



function hmfl_developer_menu()
{
  $items = array(
    'admin/hmfl/companies' => array(
      'title' => 'developer',
      'description' => 'Manage developer profiles',
      'page callback' => 'hmfl_developer_list',
      'access arguments' => array('access administration pages'),
      'position' => 'left',
      'weight' => -4,
      'type' => MENU_LOCAL_TASK,
    ),
	'developer/ajax-update' => array(
      'page callback' => 'hmfl_developer_ajax_update',
      'type' => MENU_LOCAL_TASK,
	  'access callback' => TRUE,
    ),
	'dev/admin/ajax-update' => array(
      'page callback' => 'hmfl_developer_ajax_admin_update',
      'type' => MENU_LOCAL_TASK,
	  'access callback' => TRUE,
    ),
	'dev/admin/full/name/ajax-update' => array(
      'page callback' => 'hmfl_developer_ajax_admin_full_name',
      'type' => MENU_LOCAL_TASK,
	  'access callback' => TRUE,
    ),
	'dev/admin/email/ajax-update' => array(
      'page callback' => 'hmfl_developer_ajax_admin_email',
      'type' => MENU_LOCAL_TASK,
	  'access callback' => TRUE,
    ),
	
	'password-reset/%' => array(
      'page callback' => 'drupal_get_form',
	  'page arguments'=> array('hmfl_password_reset',1),
      'type' => MENU_LOCAL_TASK,
	  'access callback' => 'hmfl_pass_perm',
    ),
	
    'admin/hmfl/companies/new' => array(
      'title' => 'new',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'hmfl_developer_new'
      ),
      'access arguments' => array(
        'access administration pages'
      ),
      'type' => MENU_LOCAL_TASK,
    ),
    'developer' => array(
      'title' => 'developer',
      'description' => 'Manage developer profiles',
      'page callback' => 'hmfl_developer_list',
      'access callback' => 'hmfl_developer_access',
      'position' => 'left',
      'weight' => -4,
      'type' => MENU_LOCAL_TASK,
    ),


//     'developer/%' => array(
//       'title callback' => 'entity_label',
//       'title arguments' => array('hmfl_developer', 1),
//       'page callback' => 'hmfl_developer_view',
//       'page arguments' => array(1),
//       'access callback' => 'hmfl_developer_admin_check',
//       'access arguments' => array(1),
//     ),
    'developer/%' => array(
      'title' => 'edit',
        'page callback' => 'hmfl_developer_main_page',
        'page arguments' => array(1),
        'access callback' => 'hmfl_developer_admin_check',
        'access arguments' => array(1),
    ),
    'developer/%/delete' => array(
      'title' => 'delete',
        'page callback' => 'hmfl_developer_confirm_delete',
        'page arguments' => array(1),
        'access arguments' => array(
          'access administration pages'
        ),
        'type' => MENU_CALLBACK,
    ),
    'developer/%/edit' => array(
      'title' => 'edit',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'developer/%/admins' => array(
      'title' => 'admins',
        'page callback' => 'hmfl_developer_admins',
        'page arguments' => array(1),
        'access callback' => 'hmfl_developer_admin_check',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
    ),
    'developer/%/admins/add' => array(
      'title' => 'add',
        'page callback' => 'drupal_get_form',
        'page arguments' => array( 'hmfl_developer_admin_add', 1),
        'access callback' => 'hmfl_developer_admin_check',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
    ),
    'developer/%/admins/%/delete' => array(
      'title' => 'delete',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hmfl_developer_admin_delete',1,3),
        'access callback' => 'hmfl_developer_admin_check',
        'access arguments' => array(1),
        'type' => MENU_NORMAL_ITEM,
    ),
   'developer/%/assign-pdfs' => array(
      'title' => 'Assign PDFs',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('hmfl_developer_assign_pdf', 1),
        'access callback' => 'hmfl_developer_admin_check',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
    ),

  );
  return $items;
}

function hmfl_developer_access()
{
  global $user;
  return in_array("developer admin",$user->roles)||in_array("administrator",$user->roles);
}

function hmfl_developer_uri($entity)
{
  return array(
    'path' => 'developer/' . $entity->id,
  );
}

function hmfl_developer_entity_info()
{
  $entities = array(
    'hmfl_developer' => array(
      'label' => t('developer'),
      'controller class' => 'EntityAPIControllerExportable',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'hmfl_developer',
      'uri callback' => 'hmfl_developer_uri',
      'load hook' => 'hmfl_developer_load',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id'
      ),
      'static cache' => TRUE,
      'bundle keys' => array(
        'bundle' => 'id',
      ),
      'bundles' => array(
        'hmfl_developer' => array(
          'label' => 'hmfl',
          'admin' => array(
            'path' => 'admin/hmfl/companies'
          )
        )
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('developer'),
          'custom settings' => FALSE
        )
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'hmfl_developer'
    ),
    'hmfl_developer_admin' => array(
      'label' => t('developer admin'),
      'controller class' => 'EntityAPIControllerExportable',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'hmfl_developer_admin',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'developer_id'
      ),
    ),
  );
  return $entities;
}



function hmfl_developer_theme()
{
  $themes = array(
    'hmfl_developer_list' => array(
      'render element' => 'form'
    ),
    'hmfl_developer_new' => array(
      'render element'=>'form'
    ),
    'hmfl_developer_edit' => array(
      'render element'=>'form'
    ),
    'hmfl_developer_admin_add'  => array(
      'render element'=>'form'
    ),
  );
  return $themes;
}




function hmfl_developer_list()
{
  global $base_url;
  $developments_enabled = module_exists('hmfl_development');

  $header = array(
    array('data' => t('id'),'width' => 100),
    array('data' => t('Developer'),'width'=>300),
    array('data' => t('Total developments'),'width'=>200),
    array('data' => t('Total plots'),'width'=>200),
	array('data' => t('Date added'),'width'=>200),
    array("data"=>"",'width'=>100),
    array("data"=>"",'width'=>100),
    array("data"=>"",'width'=>50)
  );

  $query = db_select('hmfl_developer', 'h')->extend('PagerDefault');
  $query->fields('h', array('id', 'title','time'));
  
  
  
  if(!user_access('access administration pages'))
  {
    global $user;
    $result = db_query("select developer_id from hmfl_developer_admin where user_id={$user->uid}");
    $companies = array();
    while($row = $result->fetch(PDO::FETCH_NUM))
    {
      $companies[] = $row[0]; 
    }
    if(empty($companies))
    {
      $query->condition('h.id',0); //just to cancel all rows
    }
    else
    {
      $query->condition('h.id', $companies,'IN');
    }
  }
  else
  {
      $build['admin_details'] = array(
      "#type"=>"markup",
      "#markup"=> get_admin_details(),
    );
	
     $build['add_developer'] = array(
      "#type"=>"markup",
      "#markup"=> '<div class="hide-fields">'.render(drupal_get_form('hmfl_developer_new')).'</div>',
    );
  }
  $result = $query
    ->limit(10)
    ->execute();

  $rows = array();
  foreach ($result as $row)
  {
    $query2 = db_query("SELECT COUNT(id) as total,id FROM hmfl_development WHERE developer_id = '$row->id'");
      foreach ($query2 as $res2) {
        $dev_total = $res2->total;
        $query3 = db_query("SELECT COUNT(id) as total FROM hmfl_plot WHERE development_id = '$res2->id'");
        foreach ($query3 as $res3) {
           $plot_total = $res3->total;
        }  
    }  
    
    $rows[] = array('data' => array(
      $row->id,
      '<div class="developer-ajax-edit" id="'.$row->id.'">'.$row->title.'</div>',
	  //l($row->title,"developer/{$row->id}"),
      $dev_total,
      $plot_total,
	  $row->time,
      l("admins","developer/{$row->id}/admins"),
      $developments_enabled?l("developments","developer/{$row->id}/developments"):"",
      '<a class="delete" href="developer/'.$row->id.'/delete"><img src="'.$base_url.'/sites/all/themes/hmfl/images/delete.png"/>',
    ));
  }

  $build['pager_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('There are no companies yet'),
  );
  

  $build['pager_pager'] = array('#theme' => 'pager');
  return $build;
}


function hmfl_developer_new($form, &$form_state)
{
  return hmfl_developer_form($form, $form_state, entity_create("hmfl_developer",array("id"=>"", "title"=>"")));
}

function hmfl_developer_form($form, &$form_state, $developer)
{
  $form_state['developer'] = $developer;

  $form['title'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    "#title"=>'Title',
    "#default_value"=>$developer->title
  );
  $form['time'] = array(
    '#type' => 'hidden',
    "#value"=> date('m/d/Y',time()),
  );

  field_attach_form('hmfl_developer', $developer, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Developer'),
    '#submit' => $submit + array('hmfl_developer_submit'),
  );
  return $form;
}

function hmfl_developer_submit($form, &$form_state)
{
  $developer = $form_state['developer'];
  entity_form_submit_build_entity('hfml_developer', $developer, $form, $form_state);
  try
  {
    if(!empty($developer->id))
    {
      drupal_write_record('hmfl_developer', $developer, 'id');
      field_attach_update("hmfl_developer",$developer);
      module_invoke_all('entity_update', $developer, 'hmfl_developer');

    }
    else
    {
      drupal_write_record('hmfl_developer', $developer);
      field_attach_insert("hmfl_developer",$developer);
      module_invoke_all('entity_insert', $developer, 'hmfl_developer');
    }
  }
  catch(Exception $e)
  {
  }
 // if($developer->id)
  //{
   // $form_state['redirect'] = hmfl_developer_uri($developer);
  //}
  //else
  //{
   // $form_state['redirect'] = "admin/hmfl/companies";
  //}
  drupal_set_message(t('Developer %title saved.', array('%title' => entity_label('hmfl_developer', $developer))));
}

function hmfl_developer_admin_check($id)
{
  if(!$id)
  {
    drupal_set_message("No such developer","error");
    return false;
  }
  if(user_access('access administration pages'))
  {
    //super admin
    return true;
  }
  if(!user_is_anonymous())
  {
    if(!$id) return false;
    global $user;
    $result = db_query_range("select * from hmfl_developer_admin where developer_id=".intval($id)." and user_id={$user->uid}",0,1);
    return ($result->rowCount()>0);
  }
  return false;
}

function hmfl_developer_edit($form, &$form_state, $id)
{
  $developer = entity_load('hmfl_developer', array($id), array(), false);
  if(!isset($developer[$id]))
  {
    drupal_set_message("no such developer","error");
    return $form;
  }
  $developer = $developer[$id];
  return hmfl_developer_form($form,$form_state,$developer);
}

function hmfl_developer_confirm_delete($cid)
{
  db_query("DELETE FROM hmfl_developer WHERE id = '$cid'");
  entity_delete("hmfl_developer",$developer->id);
  entity_delete("hmfl_developer_admin",$developer->id);
  drupal_set_message("developer deleted");
  drupal_goto('dashboard');
}


function hmfl_developer_view($id)
{
  $developer = entity_load('hmfl_developer', array(intval($id)), array(), false);
  if(!$developer||!isset($developer[$id]))
  {
    drupal_not_found();
    return null;
  }
  $developer = $developer[$id];
  $developer->content = array();

  $title = filter_xss($developer->title);
  drupal_set_title($title);
  field_attach_prepare_view(
    'hmfl_developer',
    array($developer->id => $developer),
    "full"
  );
  entity_prepare_view('hmfl_developer', array($developer->id => $developer));

  $developer->content += field_attach_view(
      'hmfl_developer',
      $developer, "full"
  );
 
  $developer->content += array(
    "#title"     => "$title",
    '#theme'     => 'hmfl_developer',
    '#element'   => $developer,
    '#view_mode' => 'full',
    '#language'  => NULL,
  );
  return $developer->content;
}


function hmfl_developer_admins($cid)
{

  $header = array(
    array('data' => t('User name'),'width'=>300),
	array('data' => t('Password'),'width' =>200),
    array("data"=> t("Email"),'width'=>200),
	array("data"=> t("Full name"),'width'=>200),
    array("data"=>"",'width'=>50),
  );

  $query = db_select('hmfl_developer_admin', 'h')->extend('PagerDefault');
  $query->fields('u', array('uid', 'name',"mail"));
  $query->join("users","u","u.uid=h.user_id");
  $query->condition("h.developer_id",intval($cid),"=");
  
  $result = $query->limit(10)->execute();
 
  $build['add_link'] = array(
    "#type"=>'markup',
    '#markup' => l("Add a new admin user","developer/{$cid}/admins/add"),
	'#prefix' => '<div class="add-admin">',
	'#suffix' => '</div>',
  );
  $rows = array();
  foreach ($result as $row)
  {
    $user_data = user_load($row->uid);
	if(isset($user_data->field_full_name['und']['0']['value'])) {
	  $full_name = $user_data->field_full_name['und']['0']['value'];
	 }
    $rows[] = array('data' => array(
      '<div class="ajax-edit-admin" id="'.$row->uid.'">'.$row->name.'</div>',
	  render(drupal_get_form('hmfl_password_reset',$row->uid)),
      '<div class="ajax-edit-email" id="'.$row->uid.'">'.$row->mail.'</div>',
	  '<div class="admin-full-name" id='.$row->uid.'">'.$full_name.'</div>',
     '<a class="delete-developer-admin" href="/developer/'.arg(1).'/admins/'.$row->uid.'/delete"><img src="'.$base_url.'/sites/all/themes/hmfl/images/delete.png"/>',
    ));
  }
  $build['pager_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('There are no admins yet'),
  );
  
  $build['pager_pager'] = array('#theme' => 'pager');
  return $build;
}

function hmfl_developer_admin_add($form, &$form_state, $developer)
{
  $developer = intval($developer);
  $form_state['developer_id'] = $developer;
  $users = array();
  $query = db_select('users', 'u')->extend('PagerDefault');
  $query->fields('u', array('uid', 'name'));
  $query->leftJoin("hmfl_developer_admin","h","h.developer_id={$developer} and h.user_id=u.uid");
  $query->isNull("h.user_id");
  $query->condition("u.uid","0","<>");
  $result = $query->limit(10)->execute();

  foreach($result as $row)
  {
    $users[$row->uid] = array(
      '#tree' => TRUE,
      "#entity"=>$row,
      'uid' => array(
        '#type' => 'checkbox',
        '#return_value' => $row->uid
      ),
      "name"=>array(
        "#type"=>'markup',
        '#markup' => $row->name
      ),
    );
  }
  $form['users'] = $users;
  $form['pager_pager'] = array('#theme' => 'pager');
  $form['new_user_name'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    "#title"=>'Name (new user)',
  );
  $form['new_user_email'] = array(
    '#type' => 'textfield',
    '#required' => FALSE,
    "#title"=>'Email (new user)',
  );
  
  //field_attach_form('hmfl_developer_admin', $developer_admin, $form, $form_state);

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions'] = array(
    '#weight' => 100,
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Developer'),
    '#submit' => $submit + array('hmfl_developer_admin_submit'),
  );
  $form['#validate'][] = 'hmfl_developer_admin_validate';

  return $form;
}

function theme_hmfl_developer_admin_add($variables)
{
  $form = $variables['form'];

  $header = array(
    array('data' => '', 'width' => 60),
    array('data' => 'Name', 'width' => 200),
  );
  $rows = array();
  if (!empty($form['users']))
  {
    foreach (element_children($form['users']) as $uid)
    {
      $rows[] = array(
        'data' => array(
          array('data' => drupal_render($form['users'][$uid]['uid'])),
          array('data' => drupal_render($form['users'][$uid]['name'])),
        )
      );
    }
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows
  ));
  $output = $output . drupal_render_children($form);
  return $output;
}

function hmfl_developer_admin_validate( &$form , &$form_state )
{
  foreach($form['users'] as $user)
  {
    if(is_array($user)&&isset($user['uid'])&&$user['uid']['#value']) return true;
  }
  if(empty($form['new_user_name']['#value'])&&empty($form['new_user_email']['#value']))
  {
    drupal_set_message("you need to select users from list or add new users","error");
    form_error($form['new_user_name'], "");
    form_error($form['new_user_email'], "");
  }
  else
  {
    if(empty($form['new_user_name']['#value'])||user_validate_name($form['new_user_name']['#value'])||(bool) db_select('users')->fields('users', array('uid'))->condition('name', db_like($form['new_user_name']['#value']), 'LIKE')->range(0, 1)->execute()->fetchField())
    {
      form_error($form['new_user_name'], t('invalid username or already taken'));
    }
    if(empty($form['new_user_email']['#value'])||user_validate_mail($form['new_user_email']['#value'])||(bool) db_select('users')->fields('users', array('uid'))->condition('mail', db_like($form['new_user_email']['#value']), 'LIKE')->range(0, 1)->execute()->fetchField())
    {
      form_error($form['new_user_email'], t('invalid email or already taken'));
    }
  }

}

function hmfl_developer_admin_submit($form, &$form_state)
{
  $developer_id = $form_state['developer_id'];
  $rid = db_query("SELECT rid FROM role WHERE name = 'developer admin'")->fetchField();
  $uids = array();
  foreach($form['users'] as $user)
  {
    if(is_array($user)&&isset($user['uid'])&&$user['uid']['#value'])
    {
      $uid = intval($user['uid']['#value']);
      $admin = entity_create("hmfl_developer_admin",array("developer_id"=>$developer_id, "user_id"=>$uid));
      entity_save("hmfl_developer_admin",$admin);
      $uids[] = $uid;
    }
  }
  if(!empty($uids))
  {
    user_multiple_role_edit($uids, 'add_role', $rid);
  }
  if(!empty($form['new_user_name']['#value'])&&!empty($form['new_user_email']['#value']))
  {
    $password = user_password(8);
    $fields = array(
      'name' => $form['new_user_name']['#value'],
      'mail' => $form['new_user_email']['#value'],
      'pass' => $password,
      'status' => 1,
      'init' => 'email address',
      'roles' => array(
        DRUPAL_AUTHENTICATED_RID => 'authenticated user',
        $rid => "developer admin"
      ),
    );
    $account = user_save('', $fields);
    $account->password = $fields['pass'];
      drupal_mail('user', 'register_no_approval_required', $form['new_user_email']['#value'], NULL, array('account' => $account), variable_get('site_mail', 'noreply@example.com'));

    $admin = entity_create("hmfl_developer_admin",array("developer_id"=>$developer_id, "user_id"=>$account->uid));
    entity_save("hmfl_developer_admin",$admin);
  }
  $form_state['redirect'] = "developer/$developer_id/admins";
  drupal_set_message(t('Updated developer admins'));

}

function hmfl_developer_admin_delete($form, &$form_state, $cid, $uid)
{
  $cid = intval($cid);
  $uid = intval($uid);
  db_delete("hmfl_developer_admin")->condition('developer_id', $cid)->condition("user_id",$uid)->execute();
  drupal_set_message("admin deleted");
  drupal_goto("developer/$cid/admins");
  return $form;
}

function hmfl_developer_login_form()
{
  $form = array();
  $form['username'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    "#title"=>'name',
  );
  $form['password'] = array(
    '#type' => 'password',
    '#required' => TRUE,
    "#title"=>'password',
  );
  $form['actions'] = array(
    '#weight' => 100,
  );
  $submit = array();
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Login'),
    '#submit' => $submit + array('hmfl_developer_login_submit'),
  );
  return $form;
}

function hmfl_developer_login_submit($form,&$form_state)
{
  if($uid = user_authenticate($form['username']['#value'],$form['password']['#value']))
  {
    $account = user_load($uid);
    if(in_array("administrator",$account->roles)||in_array("developer admin",$account->roles))
    {
      global $user;
      $user = $account;
      user_login_finalize($form_state);
      $request = explode("/",request_path());
     $eid = db_query("SELECT id as id1 FROM hmfl_developer WHERE title = '$request[1]' ");
foreach ( $eid as $id) {
  $new_id = $id->id1;
}
	  
	  drupal_goto('developer/'.$new_id);
      return true;
    }
  }
  return drupal_set_page_content(theme('hmfl_denied'));
}

function hmfl_developer_dashboard()
{
  return hmfl_developer_list();
}

function hmfl_developer_assign_pdf($form, &$form_state) {
  
  $selected = $form_state['values']['developments'];

  $form['pdfs'] = array(
  '#title' => t('Select PDFs to assign'),
  '#type' => 'select',
  '#options' => $pdf_list = get_dev_pdf_list(),
  '#multiple' => TRUE,
  '#description' => t('You can select multiple pdfs'),
  ); 
  
  $form['developments'] = array(
   '#title' => t('Select developments to assign pdfs to'),
   '#type' => 'select',
   '#options' => $dev_list = get_dev_list(),
   '#multiple' => FALSE,
   '#description' => t('You can select multiple devs'),
   '#default_value' => $selected,
   '#validated' => TRUE,
  '#ajax' => array(
      // When 'event' occurs, Drupal will perform an ajax request in the
      // background. Usually the default value is sufficient (eg. change for
      // select elements), but valid values include any jQuery event,
      // most notably 'mousedown', 'blur', and 'submit'.
      // 'event' => 'change',
      'callback' => 'ajax_plots', 
      'wrapper' => 'dropdown-second-replace',
       'method' => 'replace',
      'effect' => 'fade',
  ),
  );
  
  $form['plots'] = array(
   '#title' => t('Select Plots to assign pdfs to'),
   '#type' => 'select',
  '#multiple' => TRUE,
   '#prefix' => '<div id="dropdown-second-replace">', 
    '#suffix' => '</div>',
   '#description' => t('You can select multiple plots'),
   '#options' =>  ajax_options($selected), 
  );
  $form['submit'] = array(
    '#type' => 'submit',
	'#value' => t('Assign'),
  );
  $form['#submit'][] = 'hmfl_dev_pdf_assign_submit';
 
 return $form;
}

function ajax_plots($form ,&$form_state) {
  return $form['plots'];
}

function ajax_options($dev_id) {
   
    $id = $dev_id; 
     $list = array();
       if ($id) {
        $plots = db_query("SELECT id as plot_id, name as name FROM hmfl_plot WHERE development_id = '$id'");
        foreach($plots as $plot) {
          $list[$plot->plot_id] = $plot->name.' ('.$plot->plot_id.')';
       
        }
         return $list;
      }
      else {
         return $_SESSION['all'];
       }

}

function get_dev_pdf_list() {
  $dev_id = arg(1);
  $list = array();

  $pdfs = db_query("SELECT id as pdf_id,title as title FROM hmfl_development_pdf");
  foreach ($pdfs as $pdf) {
    $list[$pdf->pdf_id] = $pdf->title.' ('.$pdf->pdf_id.')';
  }
 return $list;
}

function get_dev_plot_list() {
  $dev_id = arg(1);
  $list = array();
  $development_ids = db_query("SELECT id FROM hmfl_development WHERE developer_id = '$dev_id'");
    foreach($development_ids as $development_id){ 
       $plots = db_query("SELECT id as plot_id, name as name FROM hmfl_plot WHERE development_id = '$development_id->id'");
        foreach($plots as $plot) {
          $list[$plot->plot_id] = $plot->name.' ('.$plot->plot_id.')';
       }
    }
 return $list;
}

function get_dev_list(){
 $dev_id = arg(1);
  $list = array();
    $list['0'] = '-All-';
  $development_ids = db_query("SELECT id,title FROM hmfl_development WHERE developer_id = '$dev_id'");
    foreach($development_ids as $development_id){ 
          $list[$development_id->id] = $development_id->title.' ('.$development_id->id.')';
       }
    
 return $list;
 }
function hmfl_dev_pdf_assign_submit($form ,&$form_state) {
   $fail ='';
   $success = '';
   foreach ($form_state['values']['pdfs'] as $pdf) { 
      foreach ($form_state['values']['plots'] as $plot) {	    
		$check = db_query("SELECT COUNT(id) as id FROM hmfl_plot_pdf WHERE pdf_id = '$pdf' AND plot_id = '$plot'");
		  //to check whether pdf is already assigned to plot
		  foreach ($check as $chec) {
		     $count = $chec->id;
		   }
        if (!$count) {
          // if not assigned then assign otherwise skip
        	db_insert('hmfl_plot_pdf')
           ->fields(array(
             'plot_id' => $plot,
             'pdf_id' => $pdf,
           ))
           ->execute();
		   $success[] = 'PDF '.$pdf.' assigned to Plot '.$plot;
		}
		else {
		   $fail[] = 'PDF '.$pdf.' is already assigned to Plot '.$plot;
		}
      }
    }
  if ($fail || $success) {
    foreach ($fail as $f) {
	  drupal_set_message($f, $type= 'warning');
	}
	foreach ($success as $s) {
	  drupal_set_message($s);
	}
  }
}

function hmfl_developer_init() {
  
 $dev_id = arg(1);
  $list = array();
  $development_ids = db_query("SELECT id FROM hmfl_development WHERE developer_id = '$dev_id'");
    foreach($development_ids as $development_id){ 
       $plots = db_query("SELECT id as plot_id, name as name FROM hmfl_plot WHERE development_id = '$development_id->id'");
        foreach($plots as $plot) {
          $list[$plot->plot_id] = $plot->name.' ('.$plot->plot_id.')';
       }
    }
    $_SESSION['all'] = $list;
 }
 
function get_admin_details() {
  
  $query = db_query("SELECT COUNT(id) as id FROM hmfl_developer");
  foreach($query as $quer) {
    $total_developers = $quer->id;
   }
 $query2 = db_query("SELECT COUNT(id) as id FROM hmfl_development");
  foreach($query2 as $quer2) {
    $total_developments = $quer2->id;
  }
 $query3 = db_query("SELECT COUNT(id) as id FROM hmfl_plot");
  foreach($query3 as $quer3) {
    $total_plots = $quer3->id;
   } 
$out = '<table>
<tr>
<td padding="10"><img src="/sites/default/files/classic_folios.jpg" height="120" width="120"/></td>
<td><div style="padding: 10px;"><h1 style="font-size: 20px;">myHomefiles</h1><br/>'.$total_developers.' developers<br/>'.$total_developments.' developments<br/>'.$total_plots.' plots</div></td>
</tr>
</table>';
  return $out;
}

function hmfl_developer_ajax_update() {
  $title = $_REQUEST['value'];
  $id = $_REQUEST['id'];
  
  db_update('hmfl_developer')
           ->fields(array(
             'title' => $title,
           ))
		   ->condition('id',$id,'=')
           ->execute();
     print $title;
}

function hmfl_developer_ajax_admin_update() {
   $name = $_REQUEST['value'];
   $id = $_REQUEST['id'];
   $user = user_load($id);
   $user->name = $name;
   user_save($user);
   print $name;
}

function hmfl_developer_ajax_admin_full_name() {
  $name = $_REQUEST['value'];
  $id = $_REQUEST['id'];
  $user = user_load($id);
  $user->field_full_name['und']['0']['value'] = $name;
  user_save($user);
  print $name;
}

function hmfl_developer_ajax_admin_email() {
  $email = $_REQUEST['value'];
  $id = $_REQUEST['id'];
 if (valid_email_address($email)) {
   $user = user_load($id);
   $user->mail = $email;
   user_save($user);
   print $email;
 }
  else {
   print 'Invalid email';
 }
}

function hmfl_pass_perm() {
  global $user;
  if (in_array('administrator',$user->roles) || in_array('developer admin',$user->roles) || in_array('development admin',$user->roles)) {
    return TRUE;
  }
}

function hmfl_password_reset($form,&$form_state,$uid) {
   $form = array();
   $form['submit'] = array(
     '#type'=>'submit',
	 '#value'=> t('Reset'),
	 '#submit' => array('hmfl_password_reset_submit'),
	);
	$form['uid'] = array(
	'#type'=> 'hidden',
	'#value' => $uid,
	);
	return $form;
}
   
function hmfl_password_reset_submit($form,&$form_state) {   
   $uid = $form_state['values']['uid'];
   $account = user_load($uid);
   drupal_mail('user', 'password_reset', $account->mail, NULL, array('account' => $account), variable_get('site_mail', 'noreply@example.com'));
   drupal_set_message('Password recovery email send to user '.$account->name);
}

function hmfl_developer_main_page($id) {
  $plot_module_enabled = module_exists('hmfl_plot');
  $header = array(
    array('data' => t('Development'),'width'=>300),
	array("data"=>t('Total plots'),'width'=>50),
    array("data"=>"",'width'=>50),
	array("data"=>"",'width'=>50),
  );

  $query = db_select('hmfl_development','h')->extend('PagerDefault');
  $query->fields('h', array('id', 'title'));
  $query->condition('developer_id',$id,'=');
  $result = $query
    ->limit(10)
    ->execute();
  
	
  $rows = array();
  foreach ($result as $row)
  {
  $query2 = db_query("SELECT COUNT(id) as id FROM hmfl_plot WHERE development_id ='$row->id'");
  foreach($query2 as $quer2) {
    $total_plots = $quer2->id;
   } 
    $rows[] = array('data' => array(
     '<div class="development-title-ajax-edit" id="'.$row->id.'">'.$row->title.'</div>',
      $total_plots,
	  l("Go to development",'development/'.$row->id),
     '<a class="delete-development" href="/development/'.$row->id.'/delete"><img src="'.$base_url.'/sites/all/themes/hmfl/images/delete.png"/>',
    ));
  }
 $build['add_development'] = array(
      "#type"=>"markup",
      "#markup"=> '<div class="hide-fields">'.render(drupal_get_form('hmfl_development_new',arg(1))).'</div>',
    );
  $build['pager_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('There are no developments yet'),
  );

  $build['pager_pager'] = array('#theme' => 'pager');
  return $build;


}

?>